# -*- coding: utf-8 -*-
"""checking labeled columns

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12frcf9B0h4kKXVmCnlY_yWm4fFW3zght
"""

from google.colab import drive
drive.mount('/content/drive')

# prompt: i want to open an excel file in my drive nad label it df

import pandas as pd

file_path = 'drive/MyDrive/Colab Notebooks/ML/8_labeled.xlsx' # Replace with your actual file path
df = pd.read_excel(file_path)

# Display the first few rows of the DataFrame
print(df.head())

# prompt: check for nulls. also check the "sentiment" column to see what answers we have.

# Check for null values in the DataFrame
print("\nNull values in the DataFrame:")
print(df.isnull().sum())

# Get unique values from the 'sentiment' column
print("\nUnique values in the 'sentiment' column:")
print(df['sentiment'].unique())

# prompt: delete the row that has nan in sentiment or relevnace. and also turn "neural" to "neutral" for sentiment column. can you chcek relevance column for unique values?

# Delete rows with NaN in 'sentiment' or 'relevance'
df.dropna(subset=['sentiment', 'relevance'], inplace=True)

# Replace "neural" with "neutral" in the 'sentiment' column
df['sentiment'] = df['sentiment'].replace('neutral ', 'neutral')
df['sentiment'] = df['sentiment'].replace('negative ', 'negative')
df['sentiment'] = df['sentiment'].replace('positive ', 'positive')

df['relevance'] = df['relevance'].replace('irrelevant ', 'irrelevant')

# Check for unique values in the 'relevance' column
print("\nUnique values in the 'relevance' column:")
print(df['relevance'].unique())

# Display the first few rows of the modified DataFrame
print("\nDataFrame after modifications:")
print(df.head())

# Check for null values after dropping rows
print("\nNull values in the DataFrame after modifications:")
print(df.isnull().sum())

# prompt: replace "True" for "relevant" and "False" for "irrelevant" in the relevance column

df['relevance'] = df['relevance'].replace({True: 'relevant', False: 'irrelevant'})

# Display the first few rows to verify the changes
print("\nDataFrame after replacing relevance values:")
print(df.head())

# Check unique values in 'relevance' again
print("\nUnique values in the 'relevance' column after replacement:")
print(df['relevance'].unique())

# prompt: export this as a new excel called 10_labeled

# Specify the output file path in Google Drive
output_file_path = 'drive/MyDrive/Colab Notebooks/ML/8_labeled.xlsx' # Choose a descriptive name

# Export the DataFrame to an Excel file
df.to_excel(output_file_path, index=False)

print(f"\nDataFrame exported to '{output_file_path}'")